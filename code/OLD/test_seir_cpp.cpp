#include <Rcpp.h>
using namespace Rcpp;

// This is a simple example of exporting a C++ function to R. You can
// source this function into an R session using the Rcpp::sourceCpp 
// function (or via the Source button on the editor toolbar). Learn
// more about Rcpp at:
//
//   http://www.rcpp.org/
//   http://adv-r.had.co.nz/Rcpp.html
//   http://gallery.rcpp.org/
//

//' FOI calculation
//'
//' Calculates the force of infection over time for an SEIR model
//' @param IM a numeric vector of number of infected mosquitoes over time
//' @param NH the constant human population size
//' @param b the per vector per day bite rate
//' @param pMH the probability of transmission upon bite
//' @param tstep the time step over which to bucket the force of infection. Best left to 1 for 1 day
//' @return the vector of FOI
//' @export
//[[Rcpp::export]]
NumericVector generate_foi(NumericVector I, double N, double b, double tstep){
  NumericVector foi(I.size()/tstep);
  int max = foi.size();
  int index = 0;
  double tmp;
  for(int i = 0; i < max; ++i){
    tmp = 0;
    for(int j = 0; j < tstep; ++j){
      tmp += I[index++]*b/N;
    }
    foi[i] = tmp/tstep;
  }
  return(foi);
}

//' Cumulative susceptible probability
//' 
//' Calculates the cumulative probability of remaining susceptible over the course of the epidemic
//' @param foi the time varying force of infection as generated by generate_foi
//' @param tstep the time step for the buckets. Best left to 1.
//' @return the vector of cumulative escape probabilities
//' @export
//[[Rcpp::export]]
NumericVector generate_riskS(NumericVector foi, double tstep){
  NumericVector riskS(foi.size());
  int max = riskS.size();
  riskS[0] = exp(-foi[0]*tstep);
  for(int i = 1; i < max; ++i){
    riskS[i] = riskS[i-1]*exp(-foi[i]*tstep);
  }
  return(riskS);
}
//' Risk of infection
//' 
//' Calculates the relative risk of infection over time
//' @param foi the time varying force of infection as generated by generate_foi
//' @param riskS the cumulative probability of remaining susceptible over the course of the epidemic as generated by generate_riskS
//' @param tstep the time step for the buckets. Best left to 1.
//' @return the vector of relative infection risks
//' @export
//[[Rcpp::export]]
NumericVector generate_riskI(NumericVector foi, NumericVector riskS, double tstep){
  NumericVector riskI(foi.size());
  int max = riskI.size();
  riskI[0] = 1-exp(-foi[0]*tstep);
  for(int i = 1; i < max; ++i){
    riskI[i] = riskS[i-1]*(1-exp(-foi[i]*tstep));
  }
  return(riskI);
}

//[[Rcpp::export]]
NumericVector final_riskI(NumericVector I, double N, double b, double tstep){
  NumericVector foi = generate_foi(I, N, b, 1);
  NumericVector riskS = generate_riskS(foi, tstep);
  NumericVector riskI = generate_riskI(foi, riskS, tstep);
  return(riskI);
}